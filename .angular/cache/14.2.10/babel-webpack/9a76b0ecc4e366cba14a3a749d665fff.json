{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IcrMaster {}\nexport let IcrService = /*#__PURE__*/(() => {\n  class IcrService {\n    constructor(http) {\n      this.http = http;\n      this.icrUrl = '../../assets/Export_ICR.csv';\n    }\n\n    getIcrs() {\n      return this.http.get(this.icrUrl, {\n        responseType: 'text'\n      }).pipe(retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      );\n    }\n\n    getIcr(id) {\n      return this.http.get('/api/getIcr?id=' + id).pipe(retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      );\n    }\n\n    downloadIcrs() {\n      return this.http.get('/api/download').pipe(tap(data => {\n        console.log(data);\n      }), retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      );\n    }\n\n    uploadIcr(icr) {\n      return this.http.post('/api/upload', icr).pipe(retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      ).subscribe(response => {\n        console.log(response);\n      });\n    }\n\n    uploadBulkIcrs(icrMaster, icrs) {\n      this.http.post('/api/upload', icrMaster).pipe(retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      ).pipe(tap(node => {\n        console.log(node);\n      })).subscribe(response => {\n        console.log(response);\n      });\n      this.http.post('/api/bulkUpload', icrs).pipe(retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n      ).subscribe(response => {\n        console.log(response);\n      });\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    makeIntentionalError() {\n      return this.http.get('not/a/real/url').pipe(catchError(this.handleError));\n    }\n\n  }\n\n  IcrService.ɵfac = function IcrService_Factory(t) {\n    return new (t || IcrService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  IcrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IcrService,\n    factory: IcrService.ɵfac\n  });\n  return IcrService;\n})();","map":null,"metadata":{},"sourceType":"module"}