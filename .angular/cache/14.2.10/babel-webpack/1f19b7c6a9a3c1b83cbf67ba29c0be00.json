{"ast":null,"code":"import { ChangeDetectorRef } from '@angular/core';\nimport { IcrService, IcrMaster } from './icr.service';\nimport { GlobalReference, Icr, SubscribingPackage, Tag, Variable } from './icr';\nimport { Field } from './icr';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { faGlobe } from '@fortawesome/free-solid-svg-icons';\nimport { faCloud } from '@fortawesome/free-solid-svg-icons';\nimport { faFileCode } from '@fortawesome/free-solid-svg-icons';\nimport { IcrDialog } from './global.icr.dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./icr.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@fortawesome/angular-fontawesome\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"@angular/material/chips\";\nimport * as i10 from \"@angular/material/grid-list\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"@angular/material/paginator\";\nimport * as i15 from \"@angular/material/progress-spinner\";\nimport * as i16 from \"@angular/material/radio\";\nimport * as i17 from \"@angular/material/select\";\nimport * as i18 from \"@angular/material/core\";\nimport * as i19 from \"@angular/material/table\";\nimport * as i20 from \"@angular/material/tabs\";\nimport * as i21 from \"@angular/material/toolbar\";\nimport * as i22 from \"@angular/material/tooltip\";\nconst _c0 = [\"paginator\"];\nconst _c1 = [\"fieldTable\"];\n\nfunction IcrComponent_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const sort_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sort_r6.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(sort_r6.external);\n  }\n}\n\nfunction IcrComponent_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const field_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", field_r7.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r7.external);\n  }\n}\n\nfunction IcrComponent_button_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function IcrComponent_button_28_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.resetQuery());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction IcrComponent_mat_spinner_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 26);\n  }\n}\n\nfunction IcrComponent_ng_container_42_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \\u00A0(File #\", icr_r10.file, \") \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_chip_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 41);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(icr_r10.status);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_chip_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(icr_r10.usage);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_chip_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(icr_r10.duration);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_chip_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, icr_r10.dbicStatus));\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const description_r31 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", description_r31, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_b_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1, \"Fields\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" File \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r43 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r43.file, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Field/Index \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r44 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r44.value, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Direction \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r45 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r45.direction, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Method \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r46 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r46.method, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 64);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 65);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 52, 53);\n    i0.ɵɵelementContainerStart(2, 54);\n    i0.ɵɵtemplate(3, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_3_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(4, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_4_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerStart(5, 57);\n    i0.ɵɵtemplate(6, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_6_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(7, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_7_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerStart(8, 58);\n    i0.ɵɵtemplate(9, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_9_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(10, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_10_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerStart(11, 59);\n    i0.ɵɵtemplate(12, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_th_12_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(13, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_td_13_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵtemplate(14, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_tr_14_Template, 1, 0, \"tr\", 60);\n    i0.ɵɵtemplate(15, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_tr_15_Template, 1, 0, \"tr\", 61);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const globalReference_r27 = i0.ɵɵnextContext().$implicit;\n    const ctx_r30 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"dataSource\", globalReference_r27.fields);\n    i0.ɵɵadvance(14);\n    i0.ɵɵproperty(\"matHeaderRowDef\", ctx_r30.displayedColumns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r30.displayedColumns);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_mat_card_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 47)(1, \"mat-card-header\")(2, \"mat-card-title\", 48);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"mat-card-content\");\n    i0.ɵɵtemplate(5, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_p_5_Template, 2, 1, \"p\", 49);\n    i0.ɵɵtemplate(6, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_b_6_Template, 2, 0, \"b\", 28);\n    i0.ɵɵtemplate(7, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_table_7_Template, 16, 3, \"table\", 50);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const globalReference_r27 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(globalReference_r27.reference);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", globalReference_r27.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", globalReference_r27.fields && globalReference_r27.fields.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", globalReference_r27.fields.length > 0);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 45)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, IcrComponent_ng_container_42_mat_tab_16_mat_card_3_Template, 8, 4, \"mat-card\", 46);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(icr_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", icr_r10.globalReferences);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 66)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", icr_r10.remoteProcedure, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"fa-icon\", 69);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2, \"Component/Entry Point\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r51 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"icon\", ctx_r51.faGlobe);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const description_r56 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", description_r56, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Variable \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r66 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r66.name, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Type \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r67 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r67.type, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 62);\n    i0.ɵɵtext(1, \" Variable Description \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_10_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const description_r70 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", description_r70, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 63);\n    i0.ɵɵtemplate(1, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_10_p_1_Template, 2, 1, \"p\", 49);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r68 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", element_r68.description);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 64);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 65);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 52, 53);\n    i0.ɵɵelementContainerStart(2, 70);\n    i0.ɵɵtemplate(3, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_3_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(4, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_4_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerStart(5, 71);\n    i0.ɵɵtemplate(6, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_6_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(7, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_7_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerStart(8, 72);\n    i0.ɵɵtemplate(9, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_th_9_Template, 2, 0, \"th\", 55);\n    i0.ɵɵtemplate(10, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_td_10_Template, 2, 1, \"td\", 56);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵtemplate(11, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_tr_11_Template, 1, 0, \"tr\", 60);\n    i0.ɵɵtemplate(12, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_tr_12_Template, 1, 0, \"tr\", 61);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tag_r53 = i0.ɵɵnextContext().$implicit;\n    const ctx_r55 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"dataSource\", tag_r53.variables);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"matHeaderRowDef\", ctx_r55.variableDisplayedColumns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r55.variableDisplayedColumns);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_mat_card_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 47)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"mat-card-content\");\n    i0.ɵɵtemplate(5, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_p_5_Template, 2, 1, \"p\", 49);\n    i0.ɵɵtemplate(6, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_table_6_Template, 13, 3, \"table\", 50);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tag_r53 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", tag_r53.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", tag_r53.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tag_r53.variables.length > 0);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 67);\n    i0.ɵɵtemplate(1, IcrComponent_ng_container_42_mat_tab_18_ng_template_1_Template, 3, 1, \"ng-template\", 68);\n    i0.ɵɵelementStart(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, IcrComponent_ng_container_42_mat_tab_18_mat_card_4_Template, 7, 3, \"mat-card\", 46);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(icr_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", icr_r10.tags);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_19_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const description_r75 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", description_r75, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 73)(1, \"mat-card\")(2, \"mat-card-content\");\n    i0.ɵɵtemplate(3, IcrComponent_ng_container_42_mat_tab_19_p_3_Template, 2, 1, \"p\", 22);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", icr_r10.description);\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_20_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 47)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-card-subtitle\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const package_r78 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", package_r78.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", package_r78.isc, \" \");\n  }\n}\n\nfunction IcrComponent_ng_container_42_mat_tab_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 74);\n    i0.ɵɵtemplate(1, IcrComponent_ng_container_42_mat_tab_20_mat_card_1_Template, 6, 2, \"mat-card\", 46);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", icr_r10.subscribingPackages);\n  }\n}\n\nfunction IcrComponent_ng_container_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r81 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-grid-tile\")(2, \"mat-card\", 27)(3, \"mat-card-header\")(4, \"mat-card-title\");\n    i0.ɵɵtext(5);\n    i0.ɵɵtemplate(6, IcrComponent_ng_container_42_span_6_Template, 2, 1, \"span\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-card-subtitle\")(8, \"mat-chip-list\");\n    i0.ɵɵtemplate(9, IcrComponent_ng_container_42_mat_chip_9_Template, 2, 1, \"mat-chip\", 29);\n    i0.ɵɵtemplate(10, IcrComponent_ng_container_42_mat_chip_10_Template, 2, 1, \"mat-chip\", 30);\n    i0.ɵɵtemplate(11, IcrComponent_ng_container_42_mat_chip_11_Template, 2, 1, \"mat-chip\", 31);\n    i0.ɵɵtemplate(12, IcrComponent_ng_container_42_mat_chip_12_Template, 3, 3, \"mat-chip\", 32);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"mat-card-content\")(14, \"div\", 33)(15, \"mat-tab-group\");\n    i0.ɵɵtemplate(16, IcrComponent_ng_container_42_mat_tab_16_Template, 4, 2, \"mat-tab\", 34);\n    i0.ɵɵtemplate(17, IcrComponent_ng_container_42_mat_tab_17_Template, 4, 1, \"mat-tab\", 35);\n    i0.ɵɵtemplate(18, IcrComponent_ng_container_42_mat_tab_18_Template, 5, 2, \"mat-tab\", 36);\n    i0.ɵɵtemplate(19, IcrComponent_ng_container_42_mat_tab_19_Template, 4, 1, \"mat-tab\", 37);\n    i0.ɵɵtemplate(20, IcrComponent_ng_container_42_mat_tab_20_Template, 2, 1, \"mat-tab\", 38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"mat-card-actions\", 39)(22, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function IcrComponent_ng_container_42_Template_button_click_22_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r81);\n      const icr_r10 = restoredCtx.$implicit;\n      const ctx_r80 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r80.onEditDialog(icr_r10));\n    });\n    i0.ɵɵtext(23, \"View\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const icr_r10 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate2(\" \", icr_r10.id, \"\\u00A0-\\u00A0\", icr_r10.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.globalReferences && icr_r10.globalReferences.length > 0);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.status.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.usage.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.duration.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.dbicStatus.length > 0);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.globalReferences && icr_r10.globalReferences.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.remoteProcedure && icr_r10.remoteProcedure.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.tags && icr_r10.tags.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.description && icr_r10.description.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", icr_r10.subscribingPackages && icr_r10.subscribingPackages.length > 0);\n  }\n}\n\nfunction IcrComponent_mat_paginator_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-paginator\", 75, 76);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"length\", ctx_r5.pageLength)(\"pageSize\", ctx_r5.pageSize)(\"pageSizeOptions\", ctx_r5.pageSizeOptions)(\"pageIndex\", ctx_r5.pageIndex);\n  }\n}\n\nconst _c2 = function () {\n  return {\n    standalone: true\n  };\n};\n\nexport let IcrComponent = /*#__PURE__*/(() => {\n  class IcrComponent {\n    constructor(icrService, dialog, changeDetectorRef) {\n      this.icrService = icrService;\n      this.dialog = dialog;\n      this.changeDetectorRef = changeDetectorRef;\n      this.icrs = [];\n      this.invalidIcrs = [];\n      this.pageSize = 30;\n      this.pageStart = 0;\n      this.pageIndex = 0;\n      this.previousPageIndex = 0;\n      this.pageSizeOptions = [15, 30, 60, 180, 600];\n      this.pageIcrs = [];\n      this.pageLength = 0;\n      this.displayFilter = \"B\";\n      this.displayQuery = \"\";\n      this.displayField = \"\";\n      this.displaySort = \"quality\";\n      this.hideInvalid = true;\n      this.descriptionFlag = false;\n      this.loading = true;\n      this.breakpoint = 3;\n      this.fieldList = [{\n        value: '#',\n        external: 'ID'\n      }, {\n        value: 'val',\n        external: 'Value'\n      }, {\n        value: 'desc',\n        external: 'Description'\n      }, {\n        value: 'valdesc',\n        external: 'Value+Description'\n      }];\n      this.sortBy = [{\n        value: 'id',\n        external: 'ID'\n      }, {\n        value: 'quality',\n        external: 'Quality'\n      }];\n      this.displayedColumns = ['file', 'value', 'direction', 'method'];\n      this.variableDisplayedColumns = ['name', 'type', 'description'];\n    }\n\n    get faGlobe() {\n      return faGlobe;\n    }\n\n    get faCloud() {\n      return faCloud;\n    }\n\n    get faFileCode() {\n      return faFileCode;\n    }\n\n    ngOnInit() {\n      this.loading = true;\n      this.displayField = 'val';\n      this.getIcrs();\n      this.onResize(null);\n    }\n\n    onResize($event) {\n      if (window.innerWidth <= 910) {\n        this.breakpoint = 1;\n      } else if (window.innerWidth <= 1274) {\n        this.breakpoint = 2;\n      } else {\n        this.breakpoint = 3;\n      }\n    }\n\n    openFileUpload() {\n      let element = document.getElementById('upload_icr_input');\n      element.click();\n    }\n\n    handleFileInput(evt) {\n      let fr = new FileReader();\n\n      fr.onload = e => {\n        // e.target.result should contain the text\n        //console.log(e.target.result);\n        this.handleBulkUpload(e.target.result.split('\\n'));\n      };\n\n      fr.readAsText(evt[0]);\n    }\n\n    breakAndCombine(words) {\n      //First break and discard empty member and return only meaningful members\n      words = words.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n      let strAry = words.split(' ');\n      let returnable = [];\n\n      for (let word of strAry) {\n        if (word.length > 0) {\n          returnable.push(word);\n        }\n      }\n\n      return returnable;\n    }\n    /* Get an ICR by ID */\n\n\n    getIcrById(id) {\n      for (let icr of this.icrs) {\n        if (icr.id === id) return icr;\n      }\n\n      return null;\n    }\n    /* Compare two ICRs and see if it's been isIcrUpdated\r\n     * Assumption is that the ICR is updated, if one of the following is method\r\n     * 1. Status changes.\r\n     * 2. Expires changes.\r\n     * 3. Usage changes.\r\n     * 4. Duration changes.\r\n     * 5. File changes.\r\n     * 6. Value changes (Root or Routine).\r\n     * 7. Type changes\r\n     * 8. Description changes\r\n     */\n\n\n    isIcrUpdated(one, two) {\n      if (one == null || one == undefined || two == null || two == undefined) return false;\n\n      if (one.value != two.value) {\n        console.log('value diff');\n        return true;\n      }\n\n      if (one.status != two.status) {\n        console.log('status diff');\n        return true;\n      }\n\n      if (one.expires != two.expires) {\n        console.log('expires diff');\n        return true;\n      }\n\n      if (one.usage != two.usage) {\n        console.log('usage diff');\n        return true;\n      }\n\n      if (one.duration != two.duration) {\n        console.log('duration diff');\n        return true;\n      }\n      /*\r\n      if (one.file != two.file)  {\r\n      console.log('file diff');\r\n      return true;\r\n      }\r\n      if (one.value != two.value) {\r\n      console.log('value diff');\r\n      return true;\r\n      }*/\n\n\n      if (one.type != two.type) {\n        console.log('type diff');\n        return true;\n      }\n\n      if (one.description.length != two.description.length) {\n        console.log('description length diff');\n        return true;\n      }\n\n      for (let i = 0; i < one.description.length; i++) {\n        if (one.description[i] != two.description[i]) {\n          console.log('description ' + i + ' diff');\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    handleBulkUpload(texts) {\n      var _a, _b;\n\n      let icr = new Icr();\n      let icrs = [];\n      let field = new Field();\n      let tag = new Tag();\n      let variable = new Variable();\n      let subscribingPackage = new SubscribingPackage();\n      let variableDescription = false;\n      let fieldDescription = false;\n      let globalDescription = false;\n      let componentDescription = false;\n      let globalReference = new GlobalReference();\n      let icrList = [];\n\n      for (let text of texts) {\n        let array = this.breakAndCombine(text);\n\n        if (!this.descriptionFlag) {\n          if (array[0] == \"NUMBER:\") {\n            fieldDescription = false;\n            variableDescription = false;\n            globalDescription = false;\n            componentDescription = false;\n\n            if (icr.id > 0) {\n              icrList.push(icr.id.toString());\n\n              if (this.isIcrUpdated(icr, this.getIcrById(icr.id))) {\n                icr.validated = false; //console.log(console.log(JSON.stringify(this.getIcrById(icr.id))));\n              } //push the last globalreference\n\n\n              if (globalReference.reference) {\n                if (field.value) {\n                  globalReference.fields.push(field);\n                  field = new Field();\n                }\n\n                icr.globalReferences.push(globalReference);\n                globalReference = new GlobalReference();\n              } //push the last tag\n\n\n              if (tag.name) {\n                if (variable.name) {\n                  tag.variables.push(variable);\n                }\n\n                icr.tags.push(tag);\n                tag = new Tag();\n                variable = new Variable();\n              } //push the last subscribing package\n\n\n              if (subscribingPackage.name) {\n                icr.subscribingPackages.push(subscribingPackage);\n                subscribingPackage = new SubscribingPackage();\n              }\n\n              if (icr.globalReferences && icr.globalReferences.length > 0 && icr.file == '') {\n                icr.file = '0';\n\n                if (!icr.value.includes('DD') && icr.value.includes('(')) {\n                  let f = icr.value.substring(icr.value.indexOf('(') + 1, icr.value.indexOf(','));\n\n                  if (!isNaN(Number(f))) {\n                    icr.file = f;\n                  } else {\n                    switch (f) {\n                      case 'PSRX(':\n                        icr.file = '52';\n                        break;\n\n                      case 'ICD9(':\n                        icr.file = '80';\n                        break;\n\n                      case 'LAB(':\n                        icr.file = '60';\n                        break;\n\n                      case 'PXRMINDX(':\n                        break;\n\n                      case 'A7RCP(':\n                        break;\n\n                      case 'XUSEC(':\n                        icr.file = '3.081';\n                        break;\n\n                      case 'DPT(':\n                        icr.file = '2';\n                        break;\n                    }\n                  } // recursive updating of fields\n\n\n                  if (icr.file) {\n                    for (let ref of icr.globalReferences) {\n                      for (let field of ref.fields) {\n                        if (!field.file) {\n                          field.file = Number(icr.file);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              icrs.push(icr);\n            }\n\n            icr = new Icr(); //and then, start a new ICR instance\n\n            icr.id = Number(array[1]);\n          }\n\n          if (array.includes(\"FILE\") && array.includes('NUMBER:') && array.join(' ').includes('FILE NUMBER:')) {\n            icr.file = array[array.findIndex(node => node == 'NUMBER:') + 1];\n          }\n\n          if (array.includes('GLOBAL') && array.includes('ROOT:') && array.join(' ').includes('GLOBAL ROOT:')) {\n            icr.value = array[array.findIndex(node => node == 'ROOT:') + 1];\n          }\n\n          if (array.includes('ROUTINE:')) {\n            icr.value = array[array.findIndex(node => node == 'ROUTINE:') + 1];\n          }\n\n          if (array.includes('COMPONENT/ENTRY') && array.includes('POINT:')) {\n            componentDescription = false;\n\n            if (tag.name) {\n              if (variable.name) {\n                tag.variables.push(variable);\n                variable = new Variable();\n              }\n\n              icr.tags.push(tag);\n            }\n\n            tag = new Tag();\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'POINT:') + 1);\n            tag.name = temp.join(' ');\n          }\n\n          if (array.includes('VARIABLES:')) {\n            variableDescription = false;\n            componentDescription = false;\n\n            if (variable.name) {\n              tag.variables.push(variable);\n              variable = new Variable();\n            }\n\n            variable.name = array[array.findIndex(node => node == 'VARIABLES:') + 1];\n\n            if (array.includes('TYPE:')) {\n              variable.type = array[array.findIndex(node => node == 'TYPE:') + 1];\n            }\n          }\n\n          if (array.includes('USAGE:')) {\n            icr.usage = array[array.findIndex(node => node == 'USAGE:') + 1];\n          }\n\n          if (array.includes('CUSTODIAL') && array.includes('ISC:')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'ISC:') + 1);\n            temp.splice(temp.findIndex(node => node == 'USAGE:'), temp.length);\n            icr.custodialIsc = temp.join(' ');\n          }\n\n          if (array.includes('CUSTODIAL') && array.includes('PACKAGE:') && array.join(' ').includes('CUSTODIAL PACKAGE:')) {\n            icr.custodialPackage = array[array.findIndex(node => node == 'PACKAGE:') + 1];\n          }\n\n          if (array.includes('TYPE:') && !array.includes('VARIABLES:')) {\n            icr.type = array[array.findIndex(node => node == 'TYPE:') + 1];\n\n            if (icr.type.toLocaleLowerCase() == 'remote') {\n              icr.type = 'Remote Procedure';\n            }\n          }\n\n          if (array.includes('REMOTE') && array.includes('PROCEDURE:') && array.join(' ').includes('REMOTE PROCEDURE:')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'PROCEDURE:') + 1);\n\n            if (temp.join(' ').includes(':')) {\n              temp.join(' ').split(':')[0].split(' ');\n              temp.splice(temp.length - 2, 2);\n            }\n\n            icr.remoteProcedure = temp.join(' ');\n            icr.value = icr.remoteProcedure;\n          }\n\n          if (array.includes('NAME:') && !array.join(' ').includes('FIELD NAME:')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            let name = temp.splice(temp.findIndex(node => node === 'NAME:') + 1, temp.length);\n            let index = (_b = (_a = name === null || name === void 0 ? void 0 : name.join(' ')) === null || _a === void 0 ? void 0 : _a.split(':')[0]) === null || _b === void 0 ? void 0 : _b.split(' ');\n\n            if (index.includes('ORIGINAL') && index.includes('NUMBER') && index.join(' ').includes('ORIGINAL NUMBER')) {\n              index.splice(index.length - 2, 2);\n            }\n\n            icr.name = index.join(' ');\n          }\n\n          if (array.includes('GLOBAL') && array.includes('REFERENCE:') && array.join(' ').includes('GLOBAL REFERENCE:')) {\n            globalDescription = false;\n\n            if (globalReference.reference) {\n              if (field.value) {\n                globalReference.fields.push(field);\n                field = new Field();\n              }\n\n              icr.globalReferences.push(globalReference);\n            }\n\n            globalReference = new GlobalReference();\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'REFERENCE:') + 1);\n            globalReference.reference = temp.join(' ');\n            globalReference.fields = [];\n            globalReference.description = [];\n          }\n\n          if (array.includes('FIELD') && array.includes('NUMBER:') && array.join(' ').includes('FIELD NUMBER:')) {\n            fieldDescription = false;\n\n            if (field.value && Number(field.value) > 0) {\n              globalReference.fields.push(field);\n            }\n\n            field = new Field();\n            field.value = array[array.findIndex(node => node == 'NUMBER:') + 1];\n            field.file = Number(icr.file);\n          }\n\n          if (array.includes('FIELD') && array.includes('NAME:') && array.join(' ').includes('FIELD NAME:')) {\n            fieldDescription = false;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'NAME:') + 1);\n            field.name = temp.join(' ');\n          }\n\n          if (array.includes('LOCATION:')) {\n            field.location = array[array.findIndex(node => node == 'LOCATION:') + 1];\n          }\n\n          if (array.includes('ACCESS:')) {\n            let method = array.join(' ').split('ACCESS:')[1].toLocaleLowerCase();\n\n            if (method.includes('read')) {\n              if (method.includes('write')) {\n                field.direction = 'Both';\n              } else {\n                field.direction = 'Read';\n              }\n            } else if (method.includes('write')) {\n              field.direction = 'Write';\n            } else if (method.includes('r/w')) {\n              field.direction = 'Both';\n            }\n\n            if (method.includes('fileman')) {\n              if (method.includes('direct')) {\n                field.method = 'Both';\n              } else {\n                field.method = 'Fileman';\n              }\n            } else if (method.includes('direct')) {\n              field.method = 'Direct';\n            }\n          }\n\n          if (array.includes('SUBSCRIBING') && array.includes('PACKAGE:') && array.join(' ').includes('SUBSCRIBING PACKAGE:')) {\n            variableDescription = false;\n            globalDescription = false;\n            fieldDescription = false;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, 2);\n\n            if (temp.includes('ISC:')) {\n              temp.splice(temp.findIndex(node => node == 'ISC:'), temp.length).join(' ');\n              subscribingPackage.name = temp.join(' ');\n            }\n\n            subscribingPackage.name = temp.join(' ');\n          }\n\n          if (array.includes('ISC:') && !array.includes('CUSTODIAL')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            subscribingPackage.isc = temp.splice(array.findIndex(node => node == 'ISC:') + 1, temp.length).join(' ');\n            icr.subscribingPackages.push(subscribingPackage);\n            subscribingPackage = new SubscribingPackage();\n          }\n\n          if (array.includes('STATUS:') && array.includes('DURATION:')) {\n            globalDescription = false;\n            icr.status = array[array.findIndex(node => node == 'STATUS:') + 1];\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'DURATION:') + 1);\n            icr.duration = temp.join(' ');\n          }\n\n          if (array.includes('DESCRIPTION:') && array.includes('GENERAL')) {\n            this.descriptionFlag = true;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, 2);\n            icr.description.push(temp.join(' '));\n            continue;\n          }\n\n          if (componentDescription || array.includes('COMPONENT') && array.includes('DESCRIPTION:') && array.join(' ').includes('COMPONENT DESCRIPTION:')) {\n            componentDescription = true;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'DESCRIPTION:') + 1);\n            tag.description.push(temp.join(' '));\n          }\n\n          if (fieldDescription || array.includes('FIELD') && array.includes('DESCRIPTION:') && array.join(' ').includes('FIELD DESCRIPTION:')) {\n            fieldDescription = true;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'DESCRIPTION:') + 1);\n            field.description.push(temp.join(' '));\n          }\n\n          if (variableDescription || array.includes('VARIABLES') && array.includes('DESCRIPTION:') && array.join(' ').includes('VARIABLES DESCRIPTION:')) {\n            variableDescription = true;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'DESCRIPTION:') + 1);\n            variable.description.push(temp.join(' '));\n          }\n\n          if (globalDescription || array.includes('GLOBAL') && array.includes('DESCRIPTION:') && array.join(' ').includes('GLOBAL DESCRIPTION:')) {\n            globalDescription = true;\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'DESCRIPTION:') + 1);\n            globalReference.description.push(temp.join(' '));\n          }\n\n          if (!array.includes('CUSTODIAL') && array.includes('ISC:') && subscribingPackage.name && array.join(' ').includes('CUSTODIAL ISC:')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'ISC:') + 1);\n            subscribingPackage.isc = temp.join(' ');\n            icr.subscribingPackages.push(subscribingPackage);\n            subscribingPackage = new SubscribingPackage();\n          }\n\n          if (array.includes('DBIC') && array.includes('APPROVAL') && array.includes('STATUS:') && array.join(' ').includes('DBIC APPROVAL STATUS:')) {\n            icr.dbicStatus = array[array.findIndex(node => node == 'STATUS:') + 1];\n          }\n\n          if (array.includes('KEYWORDS:')) {\n            let temp = JSON.parse(JSON.stringify(array));\n            temp.splice(0, temp.findIndex(node => node == 'KEYWORDS:') + 1);\n            icr.keywords.push(temp.join(' '));\n          }\n\n          if (array.join(' ').includes('DATE CREATED:')) {\n            let dateIndex = array.findIndex(node => node == 'CREATED:') + 1;\n            icr.dateCreated = `${array[dateIndex]}  ${array[dateIndex + 1]} ${array[dateIndex + 2]}`;\n          }\n        } else {\n          if (array.includes('STATUS:')) {\n            this.descriptionFlag = false;\n            icr.status = array[array.findIndex(node => node == 'STATUS:') + 1];\n          }\n\n          if (array.includes('DURATION:')) {\n            this.descriptionFlag = false;\n            array.splice(0, array.findIndex(node => node == 'DURATION:') + 1);\n            icr.duration = array.join(' ');\n          } else {\n            icr.description.push(array.join(' '));\n          }\n        }\n      } //add the last item to the ICR.\n\n\n      if (icr.id > 0) {\n        if (globalReference.reference) {\n          if (field.value) {\n            globalReference.fields.push(field);\n          }\n\n          icr.globalReferences.push(globalReference);\n        } //push the last tag\n\n\n        if (tag.name) {\n          if (variable.name) {\n            tag.variables.push(variable);\n          }\n\n          icr.tags.push(tag);\n          tag = new Tag();\n          variable = new Variable();\n        } //push the last subscribing package\n\n\n        if (subscribingPackage.name) {\n          icr.subscribingPackages.push(subscribingPackage);\n          subscribingPackage = new SubscribingPackage();\n        }\n\n        icrList.push(icr.id.toString());\n        icrs.push(icr);\n      }\n\n      let icrMaster = new IcrMaster();\n      icrMaster.members = icrList;\n      icrMaster.id = 'IcrMaster';\n      console.log(icrs);\n      this.icrService.uploadBulkIcrs(icrMaster, icrs); //this.ngOnInit();\n\n      return;\n    }\n\n    getIcrs() {\n      this.icrService.downloadIcrs().subscribe(data => {\n        //this.rawData = data\n        //this.processICR();\n        this.icrs = data;\n        this.initialProcess();\n        this.loading = false;\n        this.dataSource = new MatTableDataSource(this.icrs);\n        this.sortDataSource();\n        this.changeDetectorRef.detectChanges();\n        this.dataSource.paginator = this.paginator;\n        this.obs = this.dataSource.connect();\n        this.sortDataSource();\n\n        this.dataSource.filterPredicate = (data, filter) => {\n          var _a, _b, _c;\n\n          if (this.hideInvalid) {\n            if (data.status.toLowerCase() === 'withdrawn' || data.status.toLowerCase() === 'expired') {\n              return false;\n            }\n          }\n\n          filter = filter.toLowerCase();\n          if (this.displayFilter.toUpperCase() == 'R' && ((_a = data.tags) === null || _a === void 0 ? void 0 : _a.length) <= 0) return false;\n          if (this.displayFilter.toUpperCase() == 'G' && ((_b = data.globalReferences) === null || _b === void 0 ? void 0 : _b.length) <= 0) return false;\n          if (this.displayFilter.toUpperCase() == 'RPC' && ((_c = data.remoteProcedure) === null || _c === void 0 ? void 0 : _c.length) <= 0) return false;\n          if (filter == '*@*@*#@!!') return true;\n\n          if (this.displayField === '#') {\n            return data.id.toString() === filter;\n          } else if (this.displayField === 'val') {\n            if (data.value == undefined || data.value == null) return false;\n            if (data.value.trim().toLowerCase().substr(0, filter.length) === filter) return true;\n\n            if (data.file != undefined && data.file != null) {\n              if (data.file.toString() === filter) return true;\n            }\n\n            return false;\n          } else if (this.displayField == 'desc') {\n            for (let desc of data.description) {\n              if (desc.trim().toLowerCase().includes(filter)) return true;\n            }\n\n            return false;\n          } else if (this.displayField == 'valdesc') {\n            if (data.value != undefined || data.value != null) {\n              if (data.value.trim().toLowerCase().substr(0, filter.length) === filter) return true;\n\n              if (data.file != undefined && data.file != null) {\n                if (data.file.toString() === filter) return true;\n              }\n            }\n\n            for (let desc of data.description) {\n              if (desc.trim().toLowerCase().includes(filter)) return true;\n            }\n\n            return false;\n          }\n        };\n      });\n    }\n\n    getCurrentIcrs() {\n      return this.icrs;\n    }\n\n    resetQuery() {\n      this.displayQuery = '';\n      this.dataSource.filter = '*@*@*#@!!';\n    }\n    /*displayIcrCards():void {\r\n      this.pageIcrs=[]; //clear out existing displaying cards\r\n      this.pageLength=this.filteredIcrs.length;\r\n          /*if (this.filteredIcrs.length==0) {\r\n        this.filterChange({value: this.displayFilter});\r\n      }\r\n      for (let i=(this.pageStart*this.pageSize); i<(this.pageStart*this.pageSize)+this.pageSize; i++) {\r\n        if (this.filteredIcrs[i]==undefined || this.filteredIcrs[i]==null) break;\r\n        this.pageIcrs.push(this.filteredIcrs[i]);\r\n      }\r\n        }*/\n\n\n    sortDataSource() {\n      //this.dataSource.sort.sort(<MatSortable>({ id: id, start: start }));\n      if (this.displaySort == 'id') {\n        this.dataSource.data.sort((a, b) => {\n          if (a.id < b.id) {\n            return -1;\n          } else if (a.id > b.id) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n      } else if (this.displaySort == 'quality') {\n        this.dataSource.data.sort((a, b) => {\n          if (a.quality < b.quality) {\n            return 1;\n          } else if (a.quality > b.quality) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      } //this.dataSource.connect().next(this.icrs);\n      //this.paginator._changePageSize(this.paginator.pageSize);\n\n    }\n\n    applyFilter(filterValue) {\n      filterValue = filterValue.trim(); // Remove whitespace\n\n      filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n\n      this.dataSource.filter = filterValue;\n    }\n\n    sortChange() {\n      this.sortDataSource();\n      this.resetQuery();\n    }\n\n    filterChange(val) {\n      this.displayFilter = val;\n\n      switch (this.displayFilter) {\n        case 'R':\n          this.fieldList[1].external = 'Routine';\n          break;\n\n        case 'G':\n          this.fieldList[1].external = 'Global';\n          break;\n\n        case 'RPC':\n          this.fieldList[1].external = 'RPC';\n          break;\n\n        default:\n          this.fieldList[1].external = 'Value';\n          break;\n      }\n\n      this.resetQuery();\n    }\n\n    checkBoxChange() {\n      if (this.invalidIcrs.length > 0) {\n        for (let icr of this.invalidIcrs) {\n          icr.quality = -100000;\n          this.icrs.push(icr);\n        }\n\n        this.invalidIcrs = [];\n      }\n\n      this.displayQuery = ''; //this.changeDetectorRef.detectChanges();\n\n      this.dataSource.filter = '*@*@*#@!!';\n    }\n\n    onValidate(target, flag) {\n      let targetIcr = new Icr();\n\n      for (let icr of this.icrs) {\n        if (icr.id === target.id) {\n          icr.validated = flag;\n          targetIcr = icr;\n        }\n      }\n\n      this.icrService.uploadIcr(targetIcr);\n    }\n\n    setPageSizeOptions(setPageSizeOptionsInput) {\n      if (setPageSizeOptionsInput) {\n        this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\n      }\n    }\n    /*\r\n      processICR(): void {\r\n        let tempArray = new Array();\r\n        tempArray=this.rawData.split('\\n');\r\n        let counter: number;\r\n        counter=0;\r\n        this.icrs=[];\r\n    \r\n        for (let entry of tempArray) {\r\n          if (counter==0){\r\n            counter++;\r\n            continue;\r\n          }\r\n          let dataline=new Array();\r\n          dataline=entry.split('\\t');\r\n          let tempIcr: Icr;\r\n          tempIcr=new Icr();\r\n    \r\n          tempIcr.id=dataline[0];\r\n          tempIcr.name=dataline[1];\r\n          tempIcr.type=dataline[2];\r\n          tempIcr.value=dataline[3];\r\n          tempIcr.file=dataline[4];\r\n          let tempDesc:string=dataline[5];\r\n          tempIcr.description=tempDesc.split('\\\\n');\r\n          tempIcr.validated=(tempIcr.type=='R' ? true: false);\r\n          tempIcr.fields=[];\r\n    \r\n          tempIcr.tags=new Array();\r\n          for (let i=6; i<dataline.length; i++) {\r\n            tempIcr.tags.push(dataline[i]);\r\n          }\r\n          this.icrs.push(tempIcr);\r\n          counter++;\r\n        }\r\n    \r\n      }\r\n    */\n\n\n    isNumeric(val) {\n      if (val == '') return false;\n\n      var _val = +val;\n\n      return val !== val + 1 //infinity check\n      && _val === +val //Cute coercion check\n      && typeof val !== 'object'; //Array/object check\n    }\n\n    initialProcess() {\n      let keyWords = ['both', 'r/w', 'fileman', 'direct', 'read', '& w']; // Loop through and for each of global ICR, guess its fields only if it's invalidated.\n\n      for (let i = this.icrs.length - 1; i >= 0; i--) {\n        let icr = this.icrs[i]; //retired ICRs will not be considered as invalid\n        //ICRs that have EXPIRES field wlil not be considered as invalid\n\n        if (icr.status.toLowerCase() === 'withdrawn' || icr.status.toLowerCase() === 'expired') {\n          this.invalidIcrs.push(this.icrs[i]);\n          this.icrs.splice(i, 1);\n          continue;\n        }\n\n        if (icr == undefined || icr == null) continue;\n        let quality = 0;\n\n        if (icr.status.toLowerCase() === 'active') {\n          quality = 100000;\n        } else if (icr.status.toLowerCase() === 'retired') {\n          quality = -1000;\n        }\n\n        if (icr.usage.toLowerCase() === 'supported') {\n          quality = quality + 10000;\n        } else if (icr.usage.toLowerCase() === 'controlled') {\n          quality = quality + 9000;\n        } else if (icr.usage.toLowerCase() === 'private') {\n          quality = quality + 8000;\n        }\n\n        if (icr.dbicStatus.toLowerCase() === 'approved') {\n          quality = quality + 10000;\n        }\n\n        if (icr.expires != undefined && icr.expires != null && icr.expires != '') {\n          quality = 0;\n        }\n\n        for (let fld of icr.fields) {\n          if (fld.value == '*') {\n            quality = quality + 999;\n          }\n        }\n\n        if (icr.validated) quality = quality + icr.fields.length;\n        this.icrs[i].quality = quality;\n      }\n      /*\r\n          for (let [index,icr] of this.icrs.entries()) {\r\n            // Make sure that withdrawn and retired ICRs do not displaying\r\n            // Generate list of fields by guesstimate...\r\n      \r\n      \r\n            if (icr.type==='R') {\r\n              // look at tags and get rid of $$ and () and []\r\n              // and auto validate routine ICRs\r\n              let updateMe=false;\r\n      \r\n              if (!icr.validated) {\r\n                icr.validated=true;\r\n                updateMe=true;\r\n              }\r\n              if (icr.value==undefined || icr.value==null) {\r\n                console.log(icr);\r\n                continue;\r\n              }\r\n              if (icr.value.includes('\\r')) {\r\n                icr.value=icr.value.split('\\r').join('');\r\n                updateMe=true;\r\n              }\r\n      \r\n              for (let i=0; i<icr.tags.length; i++) {\r\n                if (icr.tags[i].includes('$$')) {\r\n                  icr.tags[i]=icr.tags[i].split('$$')[1];\r\n                  updateMe=true;\r\n                }\r\n                if (icr.tags[i].includes('(')) {\r\n                  icr.tags[i]=icr.tags[i].split('(')[0];\r\n                  updateMe=true;\r\n                }\r\n                if (icr.tags[i].includes('[')) {\r\n                  icr.tags[i]=icr.tags[i].split('[')[0];\r\n                  updateMe=true;\r\n                }\r\n                if (icr.tags[i].includes('\\r')) {\r\n                  icr.tags[i]=icr.tags[i].split('\\r').join('');\r\n                  updateMe=true;\r\n                }\r\n              }\r\n              if (updateMe) {\r\n                this.icrService.uploadIcr(icr);\r\n              }\r\n            }\r\n            else if (icr.type==='G') {\r\n              if (icr.fields.length>0) {\r\n                continue;\r\n              }\r\n              if  (icr.description.length==0) {\r\n                continue;\r\n              }\r\n              /*if (!icr.validated) {\r\n                //Loop through description array, we're looking for a line that starts with a number\r\n                // and has verbiages such as Direct, Fileman, and/or Read.\r\n                // has to be on the same line, and cannot be on the multiple lines.\r\n                for (let description of icr.description) {\r\n                  let tempArry = description.split(' ');\r\n                  if (this.isNumeric(tempArry[0])) {\r\n                    let test=false;\r\n                    for (let word of keyWords) {\r\n                      test=description.toLowerCase().includes(word);\r\n                      if (test) {\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (test) {\r\n                      let fileNumber=icr.file;\r\n                      let value=tempArry[0];\r\n                      let direction;\r\n                      let lowerDescription=description.toLowerCase();\r\n                      let method;\r\n      \r\n                      if (lowerDescription.includes('read')) {\r\n                        direction='Read';\r\n                      }\r\n                      if (lowerDescription.includes('write')) {\r\n                        direction='Write';\r\n                      }\r\n                      if (lowerDescription.includes('both') || description.toLowerCase().includes('& w')) {\r\n                        direction='Both';\r\n                      }\r\n      \r\n                      method='Fileman';\r\n                      if (lowerDescription.includes('direct')) {\r\n                        method='Direct';\r\n                      }\r\n                      if (lowerDescription.includes('fileman')) {\r\n                        method='Fileman';\r\n                      }\r\n      \r\n                      let hash=fileNumber.toString()+'^'+value.toString();\r\n      \r\n                      let newField:Field={\r\n                        file: Number(fileNumber),\r\n                        value: value,\r\n                        direction: direction,\r\n                        method: method\r\n                      };\r\n      \r\n                      icr.fields.push(newField);\r\n                    }\r\n                  }\r\n                  //Not a number, but we could check for cross-reference\r\n                  let tempAry2:Array<string>=[];\r\n      \r\n                  if (description.includes('\\'')) {\r\n                    tempAry2=description.split('\\'')\r\n      \r\n                  }\r\n                  if (description.includes('\\\"')) {\r\n                    tempAry2=description.split('\\\"')\r\n                  }\r\n                  if (tempAry2.length<3) { continue; }\r\n                  let counter=0;\r\n                  for (let x of tempAry2) {\r\n                    if (counter>0 && counter%2==1) {\r\n                      let fileNumber=icr.file;\r\n                      let value=x;\r\n                      let direction='Read';\r\n                      let hash=fileNumber.toString()+'^'+value.toString();\r\n      \r\n                      let newField:Field={\r\n                        file: Number(fileNumber),\r\n                        value: value,\r\n                        direction: direction,\r\n                        method: 'Direct'\r\n                      };\r\n                      icr.fields.push(newField);\r\n                    }\r\n                    counter++;\r\n                  }\r\n                }\r\n                if (icr.fields.length>0) {\r\n                  icr.fields.sort(this.compareForSortForField);\r\n                  this.icrService.uploadIcr(icr);\r\n                }\r\n      \r\n              }\r\n            }\r\n            else {\r\n              continue;\r\n            }\r\n          }*/\n\n    }\n\n    compareForSortForField(a, b) {\n      let comparison = 0;\n\n      if (a.file > b.file) {\n        comparison = 1;\n      } else if (a.file < b.file) {\n        comparison = -1;\n      }\n\n      if (comparison == 0) {\n        if (a.value > b.value) {\n          comparison = 1;\n        } else if (a.value < b.value) {\n          comparison = -1;\n        }\n      }\n\n      return comparison;\n    }\n    /*\r\n      sortIcr(event) {\r\n        console.log(event);\r\n        this.displaySort=event.value;\r\n        this.filteredIcrs.sort(this.compareForSortForIcr);\r\n      }\r\n      includeAllField(flds:Field[]) {\r\n        for (let fld of flds) {\r\n          if (fld.value=='*') return true;\r\n        }\r\n        return false;\r\n      }\r\n      compareForSortForIcr(a:Icr, b:Icr):number {\r\n        let comparison=0;\r\n        if (this.displaySort=='Quality') {\r\n          if (this.displayFilter=='R') {\r\n            if (a.tags.includes('*') && b.tags.includes('*')) {\r\n              comparison=0;\r\n              return comparison;\r\n            }\r\n            if (a.tags.includes('*')) {\r\n              comparison=1;\r\n            }\r\n            if (b.tags.includes('*')) {\r\n              comparison=-1;\r\n            }\r\n            if (a.tags.length>b.tags.length) {\r\n              comparison=1;\r\n            }\r\n            else if (a.tags.length<b.tags.length) {\r\n              comparison=-1;\r\n            }\r\n            return comparison;\r\n          }\r\n          else if (this.displayFilter=='G') {\r\n            if (this.includeAllField(a.fields) && this.includeAllField(b.fields)) {\r\n              comparison=0;\r\n              return comparison;\r\n            }\r\n            if (this.includeAllField(a.fields)) {\r\n              comparison=1;\r\n            }\r\n            if (this.includeAllField(b.fields)) {\r\n              comparison=-1;\r\n            }\r\n            if (a.fields.length>b.fields.length) {\r\n              comparison=1;\r\n            }\r\n            else if (a.fields.length<b.fields.length) {\r\n              comparison=-1;\r\n            }\r\n            return comparison;\r\n          }\r\n          else {\r\n            return comparison;\r\n          }\r\n        }\r\n        else if (this.displaySort=='Icr #') {\r\n          if (a.id>b.id) {\r\n            comparison=1;\r\n          }\r\n          if (a.id<b.id) {\r\n            comparison=-1;\r\n          }\r\n          return comparison;\r\n        }\r\n        else if (this.displaySort=='Status') {\r\n          if (a.status>b.status){\r\n            comparison=1;\r\n          }\r\n          else if (b.status>a.status) {\r\n            comparison=-1;\r\n          }\r\n          return comparison;\r\n        }\r\n        else if (this.displaySort=='Usage') {\r\n          if (a.usage>b.usage){\r\n            comparison=1;\r\n          }\r\n          else if (b.usage>a.usage) {\r\n            comparison=-\r\n            1;\r\n          }\r\n        }\r\n        return comparison;\r\n      }*/\n\n\n    onEditDialog(icr) {\n      const dialogRef = this.dialog.open(IcrDialog, {\n        width: '650px',\n        data: {\n          icr: icr,\n          upload: false\n        },\n        disableClose: true\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result == null || result == undefined) return;\n\n        if (result.upload) {\n          icr = result;\n        } else {\n          this.icrService.getIcr(icr.id.toString()).subscribe(data => {\n            icr = data;\n            this.table.renderRows();\n          });\n        }\n\n        this.table.renderRows();\n        console.log('The dialog was closed');\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.dataSource) {\n        this.dataSource.disconnect();\n      }\n    }\n\n  }\n\n  IcrComponent.ɵfac = function IcrComponent_Factory(t) {\n    return new (t || IcrComponent)(i0.ɵɵdirectiveInject(i1.IcrService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  IcrComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IcrComponent,\n    selectors: [[\"tos-icr\"]],\n    viewQuery: function IcrComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([IcrService])],\n    decls: 45,\n    vars: 22,\n    consts: [[\"color\", \"primary\"], [\"mat-button\", \"\", 3, \"click\"], [1, \"menu-spacer\"], [\"type\", \"file\", \"id\", \"upload_icr_input\", 2, \"display\", \"none\", 3, \"change\"], [1, \"main-search-form\"], [2, \"width\", \"100%\"], [\"id\", \"dropdown-field-sort\"], [3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"dropdown-field\"], [3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [\"id\", \"query-string\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\", \"keyup\"], [\"type\", \"button\", \"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [\"name\", \"displayFilter\", \"id\", \"display-filter\", \"aria-label\", \"Select an option\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [\"value\", \"B\", \"checked\", \"\", 1, \"radio-option\", 3, \"change\"], [\"value\", \"G\", 1, \"radio-option\", 3, \"change\"], [\"value\", \"R\", 1, \"radio-option\", 3, \"change\"], [\"value\", \"RPC\", 1, \"radio-option\", 3, \"change\"], [\"name\", \"display-checkBox\", 2, \"margin-left\", \"5px\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [\"class\", \"loading-indicator\", 4, \"ngIf\"], [\"rowHeight\", \"1:1\", 3, \"cols\", \"resize\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"mat-paginator-sticky\", 3, \"length\", \"pageSize\", \"pageSizeOptions\", \"pageIndex\", 4, \"ngIf\"], [3, \"value\"], [\"type\", \"button\", \"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [1, \"loading-indicator\"], [1, \"icr-card\", 2, \"margin-top\", \"10px\"], [4, \"ngIf\"], [\"color\", \"accent\", \"selected\", \"\", \"matTooltip\", \"Status\", 4, \"ngIf\"], [\"color\", \"primary\", \"selected\", \"\", \"matTooltip\", \"Usage\", 4, \"ngIf\"], [\"matTooltip\", \"Duration\", 4, \"ngIf\"], [\"matTooltip\", \"DBIC approval status\", 4, \"ngIf\"], [1, \"icr-components\"], [\"label\", \"Global References\", 4, \"ngIf\"], [\"label\", \"Remote Procedure\", 4, \"ngIf\"], [\"label\", \"\", 4, \"ngIf\"], [\"label\", \"Description\", 4, \"ngIf\"], [\"label\", \"Subscribing Package\", 4, \"ngIf\"], [2, \"text-align\", \"right\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"color\", \"accent\", \"selected\", \"\", \"matTooltip\", \"Status\"], [\"color\", \"primary\", \"selected\", \"\", \"matTooltip\", \"Usage\"], [\"matTooltip\", \"Duration\"], [\"matTooltip\", \"DBIC approval status\"], [\"label\", \"Global References\"], [\"class\", \"subcard\", 4, \"ngFor\", \"ngForOf\"], [1, \"subcard\"], [1, \"sub-title-font\"], [\"class\", \"description_p\", 4, \"ngFor\", \"ngForOf\"], [\"mat-table\", \"\", \"class\", \"mat-elevation-z8\", 3, \"dataSource\", 4, \"ngIf\"], [1, \"description_p\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"fieldTable\", \"\"], [\"matColumnDef\", \"file\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"matColumnDef\", \"direction\"], [\"matColumnDef\", \"method\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [\"label\", \"Remote Procedure\"], [\"label\", \"\"], [\"mat-tab-label\", \"\"], [3, \"icon\"], [\"matColumnDef\", \"name\"], [\"matColumnDef\", \"type\"], [\"matColumnDef\", \"description\"], [\"label\", \"Description\"], [\"label\", \"Subscribing Package\"], [1, \"mat-paginator-sticky\", 3, \"length\", \"pageSize\", \"pageSizeOptions\", \"pageIndex\"], [\"paginator\", \"\"]],\n    template: function IcrComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\")(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function IcrComponent_Template_button_click_2_listener() {\n          return ctx.resetQuery();\n        });\n        i0.ɵɵelementStart(3, \"mat-icon\");\n        i0.ɵɵtext(4, \"apps\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \" ICR Master\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"span\", 2);\n        i0.ɵɵelementStart(7, \"a\", 1);\n        i0.ɵɵlistener(\"click\", function IcrComponent_Template_a_click_7_listener() {\n          return ctx.openFileUpload();\n        });\n        i0.ɵɵelementStart(8, \"mat-icon\");\n        i0.ɵɵtext(9, \"cloud_upload\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" Upload Raw ICR \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"input\", 3);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_input_change_11_listener($event) {\n          return ctx.handleFileInput($event.target.files);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"form\", 5)(14, \"mat-form-field\", 6)(15, \"mat-select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function IcrComponent_Template_mat_select_ngModelChange_15_listener($event) {\n          return ctx.displaySort = $event;\n        })(\"selectionChange\", function IcrComponent_Template_mat_select_selectionChange_15_listener() {\n          return ctx.sortChange();\n        });\n        i0.ɵɵtemplate(16, IcrComponent_mat_option_16_Template, 2, 2, \"mat-option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-label\");\n        i0.ɵɵtext(18, \"Sort By\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"mat-form-field\", 9)(20, \"mat-select\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function IcrComponent_Template_mat_select_ngModelChange_20_listener($event) {\n          return ctx.displayField = $event;\n        });\n        i0.ɵɵtemplate(21, IcrComponent_mat_option_21_Template, 2, 2, \"mat-option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"mat-label\");\n        i0.ɵɵtext(23, \"ICR Field\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"mat-form-field\", 11)(25, \"mat-label\");\n        i0.ɵɵtext(26, \"Filter by...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function IcrComponent_Template_input_ngModelChange_27_listener($event) {\n          return ctx.displayQuery = $event;\n        })(\"keyup\", function IcrComponent_Template_input_keyup_27_listener($event) {\n          return ctx.applyFilter($event.target.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(28, IcrComponent_button_28_Template, 3, 0, \"button\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-radio-group\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function IcrComponent_Template_mat_radio_group_ngModelChange_29_listener($event) {\n          return ctx.displayFilter = $event;\n        });\n        i0.ɵɵelementStart(30, \"mat-radio-button\", 15);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_mat_radio_button_change_30_listener($event) {\n          return ctx.filterChange($event.value);\n        });\n        i0.ɵɵtext(31, \"All\\u00A0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"mat-radio-button\", 16);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_mat_radio_button_change_32_listener($event) {\n          return ctx.filterChange($event.value);\n        });\n        i0.ɵɵtext(33, \"Global\\u00A0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"mat-radio-button\", 17);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_mat_radio_button_change_34_listener($event) {\n          return ctx.filterChange($event.value);\n        });\n        i0.ɵɵtext(35, \"Component\\u00A0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"mat-radio-button\", 18);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_mat_radio_button_change_36_listener($event) {\n          return ctx.filterChange($event.value);\n        });\n        i0.ɵɵtext(37, \"RPC\\u00A0\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"mat-checkbox\", 19);\n        i0.ɵɵlistener(\"change\", function IcrComponent_Template_mat_checkbox_change_38_listener() {\n          return ctx.checkBoxChange();\n        })(\"ngModelChange\", function IcrComponent_Template_mat_checkbox_ngModelChange_38_listener($event) {\n          return ctx.hideInvalid = $event;\n        });\n        i0.ɵɵtext(39, \"No EXPIRED/WITHDRAWN\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(40, IcrComponent_mat_spinner_40_Template, 1, 0, \"mat-spinner\", 20);\n        i0.ɵɵelementStart(41, \"mat-grid-list\", 21);\n        i0.ɵɵlistener(\"resize\", function IcrComponent_Template_mat_grid_list_resize_41_listener($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n        i0.ɵɵtemplate(42, IcrComponent_ng_container_42_Template, 24, 12, \"ng-container\", 22);\n        i0.ɵɵpipe(43, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(44, IcrComponent_mat_paginator_44_Template, 2, 4, \"mat-paginator\", 23);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngModel\", ctx.displaySort)(\"ngModelOptions\", i0.ɵɵpureFunction0(18, _c2));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sortBy);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.displayField)(\"ngModelOptions\", i0.ɵɵpureFunction0(19, _c2));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.fieldList);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.displayQuery)(\"ngModelOptions\", i0.ɵɵpureFunction0(20, _c2));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displayQuery);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.displayFilter)(\"ngModelOptions\", i0.ɵɵpureFunction0(21, _c2));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.hideInvalid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"cols\", ctx.breakpoint);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(43, 16, ctx.obs));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.FaIconComponent, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm, i6.MatButton, i6.MatAnchor, i7.MatCard, i7.MatCardHeader, i7.MatCardContent, i7.MatCardTitle, i7.MatCardSubtitle, i7.MatCardActions, i8.MatCheckbox, i9.MatChipList, i9.MatChip, i10.MatGridList, i10.MatGridTile, i11.MatIcon, i12.MatFormField, i12.MatLabel, i12.MatSuffix, i13.MatInput, i14.MatPaginator, i15.MatProgressSpinner, i16.MatRadioGroup, i16.MatRadioButton, i17.MatSelect, i18.MatOption, i19.MatTable, i19.MatHeaderCellDef, i19.MatHeaderRowDef, i19.MatColumnDef, i19.MatCellDef, i19.MatRowDef, i19.MatHeaderCell, i19.MatCell, i19.MatHeaderRow, i19.MatRow, i20.MatTabGroup, i20.MatTabLabel, i20.MatTab, i21.MatToolbar, i21.MatToolbarRow, i22.MatTooltip, i3.AsyncPipe, i3.TitleCasePipe],\n    styles: [\"table[_ngcontent-%COMP%]{width:100%}[_ngcontent-%COMP%]::-webkit-scrollbar{width:10px}[_ngcontent-%COMP%]::-webkit-scrollbar-track{box-shadow:inset 0 0 2px gray;border-radius:5px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:#999;border-radius:5px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover{background:#444}.menu-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.icr-card[_ngcontent-%COMP%]{width:100%;height:405px;max-height:405px;overflow:auto;margin:5px}.icr-card[_ngcontent-%COMP%]   .icr-components[_ngcontent-%COMP%]{overflow:auto;height:270px;max-height:270px;margin-top:1px}.main-search-form[_ngcontent-%COMP%]{margin:25px}.main-search-form[_ngcontent-%COMP%]   #dropdown-field[_ngcontent-%COMP%]{width:10%}.main-search-form[_ngcontent-%COMP%]   #query-string[_ngcontent-%COMP%]{width:45%}.main-search-form[_ngcontent-%COMP%]   #display-filter[_ngcontent-%COMP%]{width:15%}.main-search-form[_ngcontent-%COMP%]   #display-filter[_ngcontent-%COMP%]   .radio-option[_ngcontent-%COMP%]{margin-right:5px}.main-search-form[_ngcontent-%COMP%]   #dropdown-sort[_ngcontent-%COMP%]{width:10%}.main-search-form[_ngcontent-%COMP%]   #display-checkBox[_ngcontent-%COMP%]{width:15%}.main-search-form[_ngcontent-%COMP%]   #reset-button[_ngcontent-%COMP%]{margin-left:10px}.loading-indicator[_ngcontent-%COMP%]{position:fixed;z-index:999;height:2em;width:2em;overflow:show;margin:auto;inset:0}.mat-paginator-sticky[_ngcontent-%COMP%]{bottom:0;position:sticky;z-index:10}.sub-title-font[_ngcontent-%COMP%]{font-size:15px}.subcard[_ngcontent-%COMP%]{margin:5px}  th.mat-header-cell,   td.mat-cell,   td.mat-footer-cell{padding:5px!important}.description_p[_ngcontent-%COMP%]{font-size:13px;margin-top:-8px!important}\"]\n  });\n  return IcrComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}